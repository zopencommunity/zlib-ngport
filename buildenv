# Update bump details accordingly. Use bump check to confirm.
# bump: zlib-ng-version /ZLIB-NG_VERSION="(.*)"/ https://github.com/zlib-ng/zlib-ng.git|semver:*
# ZLIB-NG_VERSION="2.2.0" # Specify a stable release
# export ZOPEN_STABLE_TAG="v${ZLIB-NG_VERSION}"
export ZOPEN_STABLE_URL="https://github.com/zlib-ng/zlib-ng.git"
export ZOPEN_STABLE_DEPS="make autoconf automake libtool perl m4 coreutils grep"
export ZOPEN_DEV_URL="https://github.com/zlib-ng/zlib-ng.git"
export ZOPEN_DEV_DEPS="make autoconf automake libtool perl m4 coreutils grep"
export ZOPEN_BUILD_LINE="DEV"
export ZOPEN_CATEGORIES="development"
export ZOPEN_COMP=CLANG
export ZOPEN_CONFIGURE_MINIMAL=Y     
export ZOPEN_EXTRA_CONFIGURE_OPTS="--static --without-crc32-vx --zlib-compat" #TODO:--with-dfltcc-deflate --with-dfltcc-inflate
#export ZOPEN_EXTRA_CONFIGURE_OPTS="--static --without-crc32-vx"  #TODO:--with-dfltcc-deflate --with-dfltcc-inflate

zopen_pre_patch()
{
  export CFLAGS="$CFLAGS $CPPFLAGS -DZLIB_COMPAT=1"
}

zopen_append_to_env()
{
cat <<ZZ
if [ ! -z "\$ZOPEN_IN_ZOPEN_BUILD" ]; then
  export ZOPEN_EXTRA_CFLAGS="\${ZOPEN_EXTRA_CFLAGS} -I\$PWD/include"
  export ZOPEN_EXTRA_CXXFLAGS="\${ZOPEN_EXTRA_CXXFLAGS} -I\$PWD/include"
  export ZOPEN_EXTRA_LDFLAGS="\${ZOPEN_EXTRA_LDFLAGS} -L\$PWD/lib"
  export ZOPEN_EXTRA_LIBS="\${ZOPEN_EXTRA_LIBS} -lz"
fi
ZZ
}

zopen_check_results()
{
  dir="$1"
  pfx="$2"
  chk="$1/$2_check.log"
  totalTests=$(egrep "\*\*\* zlib " $chk | wc -l)
  passed=$(egrep "test OK" $chk | wc -l) 
  failures=$((totalTests-passed))

# Echo the following information to guage build health
cat <<TEST
actualFailures:$failures
totalTests:$totalTests
expectedFailures:0
TEST
}

zopen_get_version()
{
  # Modify to echo the version of your tool/library
  # Rather than hardcoding the version, obtain the version by running the tool/library
  echo "1.0.0"
}
